import { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Input } from "@/components/ui/input";
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from "@/components/ui/select";
import { CheckCircle, XCircle, AlertTriangle } from "lucide-react";

export default function DataModeration() {
  const [stats, setStats] = useState({
    pendingCount: 0,
    approvedCount: 0,
    rejectedCount: 0,
  });

  const [datasets, setDatasets] = useState([]);
  const [filteredData, setFilteredData] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState("all");

  // üìä L·∫•y th·ªëng k√™
  const fetchStats = async () => {
    try {
      const res = await fetch("/api/DataPackage/Count");
      if (!res.ok) throw new Error("L·ªói t·∫£i d·ªØ li·ªáu th·ªëng k√™");
      const data = await res.json();
      setStats(data);
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i th·ªëng k√™:", error);
    }
  };

  useEffect(() => {
    fetchStats();
  }, []);

  // üìÇ L·∫•y danh s√°ch dataset
  const fetchDatasets = async () => {
    try {
      const res = await fetch("/api/DataPackage/DataForAdmin");
      if (!res.ok) throw new Error("L·ªói t·∫£i d·ªØ li·ªáu");
      const result = await res.json();
      console.log("‚úÖ D·ªØ li·ªáu t·ª´ API:", result);

      const data = result.data || [];
      setDatasets(data);
      setFilteredData(data);
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i danh s√°ch:", error);
    }
  };

  useEffect(() => {
    fetchDatasets();
  }, []);

  // üìå L·ªçc d·ªØ li·ªáu khi t√¨m ki·∫øm ho·∫∑c l·ªçc tr·∫°ng th√°i
  useEffect(() => {
    let data = datasets;

    if (searchTerm) {
      data = data.filter(
        (d) =>
          (d.packageName?.toLowerCase() || "").includes(searchTerm.toLowerCase()) ||
          (d.providerName?.toLowerCase() || "").includes(searchTerm.toLowerCase())
      );
    }

    if (statusFilter !== "all") {
      data = data.filter((d) => d.status === statusFilter);
    }

    setFilteredData(data);
  }, [searchTerm, statusFilter, datasets]);

  // üì§ G·ªçi API ƒë·ªïi tr·∫°ng th√°i
const changeStatus = async (packageId, newStatus) => {
  try {
    // ‚úÖ X√°c nh·∫≠n h√†nh ƒë·ªông
    const actionText = newStatus === "Approved" ? "duy·ªát" : "t·ª´ ch·ªëi";
    const confirmAction = window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën ${actionText} g√≥i d·ªØ li·ªáu n√†y kh√¥ng?`);
    if (!confirmAction) return;

    const res = await fetch(`/api/DataPackage/${packageId}/status`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ newStatus }),
    });

    if (!res.ok) throw new Error("C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i");
    console.log(`‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i ${newStatus} cho g√≥i ${packageId} th√†nh c√¥ng`);

    // Load l·∫°i d·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t
    await fetchDatasets();
    await fetchStats();

    // ‚úÖ Hi·ªÉn th·ªã th√¥ng b√°o ƒë∆°n gi·∫£n
    alert(`G√≥i d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c ${actionText} th√†nh c√¥ng!`);
  } catch (error) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", error);
    alert("‚ùå C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!");
  }
};

  return (
    <div className="space-y-8">
      {/* Header */}
      <div>
        <h1 className="text-3xl font-bold text-foreground">Ki·ªÉm duy·ªát d·ªØ li·ªáu</h1>
        <p className="text-muted-foreground mt-2">
          Xem x√©t v√† ph√™ duy·ªát d·ªØ li·ªáu tr∆∞·ªõc khi xu·∫•t b·∫£n
        </p>
      </div>

      {/* Cards th·ªëng k√™ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="shadow-card border-border/50">
          <CardContent className="pt-6 text-center">
            <div className="bg-warning/10 p-3 rounded-full w-fit mx-auto mb-3">
              <AlertTriangle className="h-6 w-6 text-warning" />
            </div>
            <h3 className="text-2xl font-bold">{stats.pendingCount}</h3>
            <p className="text-sm text-muted-foreground mt-1">Ch·ªù ki·ªÉm duy·ªát</p>
          </CardContent>
        </Card>

        <Card className="shadow-card border-border/50">
          <CardContent className="pt-6 text-center">
            <div className="bg-success/10 p-3 rounded-full w-fit mx-auto mb-3">
              <CheckCircle className="h-6 w-6 text-success" />
            </div>
            <h3 className="text-2xl font-bold">{stats.approvedCount}</h3>
            <p className="text-sm text-muted-foreground mt-1">ƒê√£ ph√™ duy·ªát</p>
          </CardContent>
        </Card>

        <Card className="shadow-card border-border/50">
          <CardContent className="pt-6 text-center">
            <div className="bg-destructive/10 p-3 rounded-full w-fit mx-auto mb-3">
              <XCircle className="h-6 w-6 text-destructive" />
            </div>
            <h3 className="text-2xl font-bold">{stats.rejectedCount}</h3>
            <p className="text-sm text-muted-foreground mt-1">T·ª´ ch·ªëi</p>
          </CardContent>
        </Card>
      </div>

      {/* B·∫£ng d·ªØ li·ªáu */}
      <Card className="shadow-card border-border/50">
        <CardHeader>
          <CardTitle>D·ªØ li·ªáu ch·ªù ki·ªÉm duy·ªát</CardTitle>
        </CardHeader>

        <div className="px-6 pb-4 flex flex-col md:flex-row justify-between items-center gap-4">
          <div className="w-full md:w-1/2">
            <Input
              placeholder="üîç T√¨m ki·∫øm theo t√™n ho·∫∑c nh√† cung c·∫•p..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full"
            />
          </div>

          <div className="w-full md:w-1/4">
            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="L·ªçc theo tr·∫°ng th√°i" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">T·∫•t c·∫£</SelectItem>
                <SelectItem value="Pending">Ch·ªù duy·ªát</SelectItem>
                <SelectItem value="Approved">ƒê√£ duy·ªát</SelectItem>
                <SelectItem value="Rejected">T·ª´ ch·ªëi</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <CardContent>
          <div className="rounded-md border border-border/50">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>T√™n b·ªô d·ªØ li·ªáu</TableHead>
                  <TableHead>Nh√† cung c·∫•p</TableHead>
                  <TableHead>Danh m·ª•c</TableHead>
                  <TableHead>K√≠ch th∆∞·ªõc</TableHead>
                  <TableHead>Ng√†y t·∫£i l√™n</TableHead>
                  <TableHead>Tr·∫°ng th√°i</TableHead>
                  <TableHead className="text-right">H√†nh ƒë·ªông</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {Array.isArray(filteredData) && filteredData.map((dataset) => (
                  <TableRow key={dataset.packageId}>
                    <TableCell className="font-medium">{dataset.packageName}</TableCell>
                    <TableCell>{dataset.providerName}</TableCell>
                    <TableCell>
                      <Badge variant="outline">{dataset.categoryName}</Badge>
                    </TableCell>
                    <TableCell>{dataset.fileSize}</TableCell>
                    <TableCell>
                      {new Date(dataset.createdAt).toLocaleDateString("vi-VN")}
                    </TableCell>
                    <TableCell>
                      <Badge
                        variant={
                          dataset.status === "Approved"
                            ? "default"
                            : dataset.status === "Pending"
                            ? "secondary"
                            : "destructive"
                        }
                      >
                        {dataset.status === "Approved"
                          ? "ƒê√£ duy·ªát"
                          : dataset.status === "Pending"
                          ? "Ch·ªù duy·ªát"
                          : "T·ª´ ch·ªëi"}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right">
                      <div className="flex items-center justify-end gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          className="text-success border-success hover:bg-success/10"
                          onClick={() => changeStatus(dataset.packageId, "Approved")}
                        >
                          <CheckCircle className="h-4 w-4 mr-1" />
                          Duy·ªát
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          className="text-destructive border-destructive hover:bg-destructive/10"
                          onClick={() => changeStatus(dataset.packageId, "Rejected")}
                        >
                          <XCircle className="h-4 w-4 mr-1" />
                          T·ª´ ch·ªëi
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}

                {filteredData.length === 0 && (
                  <TableRow>
                    <TableCell colSpan={7} className="text-center text-muted-foreground py-4">
                      Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
